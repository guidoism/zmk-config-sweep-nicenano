/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>

&mt {
    //  flavor = "tap-preferred";
    // tapping_term_ms = <200>;
};

/ {
    behaviors {
        quote2: single_double_quote {
            compatible = "zmk,behavior-mod-morph";
            label = "SINGLE_DOUBLE_QUOTE";
            #binding-cells = <0>;
            bindings = <&kp SINGLE_QUOTE>, <&kp DOUBLE_QUOTES>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
    };
    
    combos {
        compatible = "zmk,combos";

        combo_esc {
            timeout-ms = <50>;
            key-positions = <0 1>;
            bindings = <&kp ESC>;
        };

        combo_tab {
            timeout-ms = <50>;
            key-positions = <10 11>;
            bindings = <&kp TAB>;
        };

        combo_ralt {
            timeout-ms = <50>;
            key-positions = <17 16>;
            bindings = <&kp RALT>;
        };

        combo_lalt {
            timeout-ms = <50>;
            key-positions = <11 12>;
            bindings = <&kp LALT>;
        };

        combo_lgui {
            timeout-ms = <50>;
            key-positions = <12 13>;
            bindings = <&kp LGUI>;
        };

        combo_rgui {
            timeout-ms = <50>;
            key-positions = <17 18>;
            bindings = <&kp RGUI>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
  &kp Q   &kp W   &kp E   &kp R    &kp T    &kp Y             &kp U      &kp I      &kp O             &kp P
  &kp A   &kp S   &kp D   &kp F    &kp G    &kp H             &kp J      &kp K      &kp L             &sk LSHIFT
  &kp Z   &kp X   &kp C   &kp V    &kp B    &kp N             &kp M      &kp COMMA  &kp DOT           &kp SINGLE_QUOTE
                          &mo 1    &mo 2    &mt LCTRL SPACE   &sk LCMD
            >;
        };

        num_layer {
            bindings = <
 &kp GRAVE          &kp TILDE              &kp PIPE              &kp BACKSLASH           &kp PLUS   &kp COLON       &kp N7      &kp N8  &kp N9      &none
 &kp LEFT_BRACKET   &kp RIGHT_BRACKET      &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS   &kp MINUS  &kp EQUAL       &kp N4      &kp N5  &kp N6      &caps_word
 &kp LEFT_BRACE     &kp RIGHT_BRACE        &kp LESS_THAN         &kp GREATER_THAN        &kp DOT    &kp N0          &kp N1      &kp N2  &kp N3      &kp SLASH
                                                                 &mo 1                   &none      &kp SPACE       &none
            >;
        };

        mov_layer {
            bindings = <
 &none     &none       &none      &none     &none         &none         &mt HOME PG_UP    &kp UP     &mt END PG_DN     &kp BACKSPACE
 &kp LALT  &kp LSHIFT  &kp LCTRL  &kp LCMD  &kp LC(SPACE) &none         &kp LEFT          &kp DOWN   &kp RIGHT         &kp RETURN
 &none     &none       &none      &none     &none         &none         &none             &none      &none             &none
                                  &none     &none         &kp SPACE     &sl 3
            >;
        };

        edit_layer {
            bindings = <
 &none  &none  &none  &none  &none  &none  &none  &none  &none  &none
 &none  &none  &kp F3 &kp F4 &none  &none  &none  &none  &none  &none
 &none  &none  &none  &none  &none  &none  &none  &none  &none  &none
                      &none  &none  &none  &none
            >;
        };

        tri_layer {
            bindings = <
 &bootloader &none       &none          &none  &none      &bootloader  &none  &none &none  &none
 &none       &none       &none          &none  &none      &none  &none  &none &none  &none  
 &bt BT_CLR  &bt BT_NXT  &bt BT_PRV     &none  &none      &none  &none  &none &none  &none
                                        &none  &none      &none  &none
            >;
        };

    };
};
