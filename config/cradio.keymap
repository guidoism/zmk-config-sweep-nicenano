/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>

&mt {
    //  flavor = "tap-preferred";
    // tapping_term_ms = <200>;
};

/ {
    combos {
        compatible = "zmk,combos";

        combo_esc {
            timeout-ms = <50>;
            key-positions = <0 1>;
            bindings = <&kp ESC>;
        };

        combo_tab {
            timeout-ms = <50>;
            key-positions = <10 11>;
            bindings = <&kp TAB>;
        };

        combo_ralt {
            timeout-ms = <50>;
            key-positions = <17 16>;
            bindings = <&kp RALT>;
        };

        combo_lalt {
            timeout-ms = <50>;
            key-positions = <11 12>;
            bindings = <&kp LALT>;
        };

        combo_lgui {
            timeout-ms = <50>;
            key-positions = <12 13>;
            bindings = <&kp LGUI>;
        };

        combo_rgui {
            timeout-ms = <50>;
            key-positions = <17 18>;
            bindings = <&kp RGUI>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
  &kp Q   &kp W   &kp E   &kp R           &kp T                   &kp Y   &kp U      &kp I    &kp O             &kp P
  &kp A   &kp S   &kp D   &kp F           &kp G                   &kp H   &kp J      &kp K    &kp L         &kp COLON
  &kp Z   &kp X   &kp C   &kp V           &kp B                   &kp N   &kp M  &kp COMMA  &kp DOT  &kp SINGLE_QUOTE
                          &mo 1  &kp LEFT_SHIFT  &mt LEFT_CONTROL SPACE   &mo 2
            >;
        };

        left_layer {
            bindings = <
        &kp GRAVE          &kp TILDE              &kp PIPE          &kp BACKSLASH  &kp MINUS  &kp UNDERSCORE  &kp N7  &kp N8  &kp N9  &kp BACKSPACE
 &kp LEFT_BRACKET  &kp RIGHT_BRACKET  &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS   &kp PLUS       &kp EQUAL  &kp N4  &kp N5  &kp N6     &kp RETURN
   &kp LEFT_BRACE    &kp RIGHT_BRACE         &kp LESS_THAN       &kp GREATER_THAN    &kp DOT          &kp N0  &kp N1  &kp N2  &kp N3      &kp SLASH
                                                                            &mo 1   &kp LGUI        &kp RGUI   &mo 2
            >;
        };

        right_layer {
            bindings = <
 &kp BANG  &kp ATSN   &kp X     &kp X  &kp PRCT   &kp CRRT  &ht_hp HOME PG_UP    &kp UP  &ht_hp END PG_DN  &kp RPRN
    &kp X     &kp X   &kp X  &kp COLN  &kp SCLN  &kp MINUS   &kp LEFT  &kp DOWN  &kp RIGHT  &kp BKSP
 &kp LSFT  &kp KPLS   &kp X     &kp X     &kp X  &kp UNDER      &kp X     &kp X      &kp X     &kp X
                                &mo 3  &kp LCTL    &kp SPC      &mo 2
            >;
        };

        tri_layer {
            bindings = <
  &kp NUM_1   &kp NUM_2   &kp NUM_3  &kp NUM_4  &kp NUM_5  &trans     &trans        &trans      &trans  &trans
     &kp F1      &kp F2      &kp F3     &kp F4     &kp F5  &trans  &kp PG_UP  &kp K_VOL_UP  &kp K_MUTE  &trans
 &bt BT_CLR  &bt BT_NXT  &bt BT_PRV     &kp F6     &kp F7  &trans  &kp PG_DN  &kp K_VOL_DN      &trans  &trans
                                        &trans     &trans  &trans     &trans
            >;
        };

        Layer__4 {
            bindings = <
 &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
 &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
 &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
                         &trans  &trans  &trans  &trans
            >;
        };
    };
};
